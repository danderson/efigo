#!/bin/bash

set -e

bin() {
    rm -f helloworld helloworld.dump
    (
        set -e
        export GOROOT=`pwd`/..
        export GOPATH=`pwd`
        export PATH=`pwd`/../bin:$PATH
        export GOOS=uefi
        export GOARCH=amd64
        go build -ldflags '-v' -x -v -work helloworld
    ) || exit 1
    mv helloworld helloworld.so
    objcopy -j.text -j.sdata -j.data -j.dynamic -j.dynsym -j.rel -j.rela -j.reloc -S --target=efi-app-x86-64 helloworld.so helloworld
    #
    objdump -xD helloworld.so >helloworld.so.dump
    objdump -xD helloworld >helloworld.dump
}

install() {
        guestfish <<EOF
add uefi.img
run
mount /dev/sda1 /
upload $1 /EFI/BOOT/BOOTX64.EFI
EOF
}

patch() {
    go run patchentry.go $1
}

case $1 in
    toolchain)
        (
            cd ../src
            GOROOT_BOOTSTRAP=$(go env GOROOT) ./make.bash
        )
    ;;
    diskimg)
        guestfish <<EOF
sparse uefi.img 10M
run
part-disk /dev/sda efi
part-set-gpt-type /dev/sda 1 C12A7328-F81F-11D2-BA4B-00A0C93EC93B
mkfs vfat /dev/sda1
mount /dev/sda1 /
mkdir /EFI
mkdir /EFI/BOOT
EOF
    ;;
    bin)
        bin
        install ${2:-helloworld}
        ;;
    patch)
        patch
        ;;
    bin-debug)
        bin
        patch ${2:-helloworld}
        install ${2:-helloworld}
        ;;
    qemu)
        qemu-system-x86_64 -s -bios /usr/share/ovmf/ovmf_x64.bin -drive file=uefi.img,if=ide,format=raw -monitor stdio
        ;;
    db)
        gdb --command=gdb-cmds
        ;;
    *)
        cat <<EOF
Commands:
 toolchain - compile gc for UEFI
 diskimg - create the uefi.img disk
 bin - compile helloworld EFI binary and add it to uefi.img
 qemu - launch qemu with uefi.img
 qemu-dbg - lauch qemu with gdb hooked up
EOF
        exit 1
esac
